<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_16255_cmdb_sync.Util</api_name>
        <client_callable>false</client_callable>
        <description>Utility methods reside here.</description>
        <name>Util</name>
        <script><![CDATA[var Util = Class.create();
Util.prototype = {
    initialize: function() {
    },
	
	tables: {
		source: 'x_16255_cmdb_sync_source',
		tag: 'x_16255_cmdb_sync_tag',
		group: 'x_16255_cmdb_sync_group'
	},

    type: 'Util',
	
	/*
	 * Params: 
	 *   sourceGr - GlideRecord of Source table
	 *   tagObject - Javascript Object containing id, name and ruleType keys
	 * Returns:
	 *   GlideRecord of Tag table - if given tag exists for given source, exiting GlideRecord, otherwise a new GlideRecord
	 */
	getTagGr: function (sourceGr, tagObject) {
		var tagGr = new GlideRecord(this.tables.tag);
		
		tagGr.addQuery('source_sys_id', sourceGr.sys_id);
		tagGr.addQuery('tag_id', tagObject.id);
		tagGr.query();
		
		while (tagGr.next()) {
			return tagGr;
		}
		// we are here, means there's no record found for given tag id on given source.
		return new GlideRecord(this.tables.tag);
	},
	
	/*
	 * Params: 
	 *   sourceGr - GlideRecord of Source table
	 *   tagObject - Javascript object having these keys: id, name, ruleType
	 * Returns:
	 *   'insert', if new record is inserted
	 *   'update', if existing record is updated
	 *   'error', if any error is encountered
	 */
	insertOrUpdateTag: function (sourceGr, tagObject) {
		try {
			var tagGr = this.getTagGr(sourceGr, tagObject);

			if (tagGr.tag_id == tagObject.id) {
				tagGr.setValue('tag_name', tagObject.name);
				tagGr.update();
				return 'update';
			} else {
				tagGr.setValue('source_sys_id', sourceGr.sys_id);
				tagGr.setValue('tag_id', tagObject.id);
				tagGr.setValue('tag_name', tagObject.name);
				tagGr.setValue('tag_type', tagObject.ruleType);
				tagGr.insert();
				return 'insert';
			}			
		} catch (error) {
			gs.error('1.0 | Error while inserting/updating tag id ' + tagObject.id + ' from source ' + sourceGr.name + '. Error: ' + error);
			return 'error';
		}
	},
	
	getGroupGr: function (sourceGr, groupObject) {
		var groupGr = new GlideRecord(this.tables.group);
		
		groupGr.addQuery('source_sys_id', sourceGr.sys_id);
		groupGr.addQuery('group_id', groupObject.id);
		groupGr.query();
		
		while (groupGr.next()) {
			return groupGr;
		}
		// we are here, means there's no record found for given tag id on given source.
		return new GlideRecord(this.tables.group);
	},

	/*
	 * Params: 
	 *   sourceGr - GlideRecord of Source table
	 *   groupObject - Javascript object having these keys: id, name
	 * Returns:
	 *   'insert', if new record is inserted
	 *   'update', if existing record is updated
	 *   'error', if any error is encountered
	 */	
	insertOrUpdateGroup: function (sourceGr, groupObject) {
		try {
			var groupGr = this.getGroupGr(sourceGr, groupObject);
			
			if (groupGr.group_id == groupObject.id) {
				groupGr.setValue('group_name', groupObject.name);
				groupGr.update();
				return 'update';
			} else {
				groupGr.setValue('source_sys_id', sourceGr.sys_id);
				groupGr.setValue('group_id', groupObject.id);
				groupGr.setValue('group_name', groupObject.name);
				groupGr.insert();
				return 'insert';
			}
		} catch (error) {
			gs.error('1.0 | Error while inserting/updating group id ' + groupObject.id + ' from source "' + sourceGr.name + '". Error: ' + error);
			return 'error';
		}
	},
	
	syncTags: function (sourceGr) {
		if (sourceGr == undefined) {
			sourceGr = new GlideRecord(this.tables.source);
			sourceGr.addQuery('sync_tags', true);
			sourceGr.query();
		}
		
		while (sourceGr.next()) {
			gs.info('1.0 | Syncing tags from source "' + sourceGr.name + '".');
			
			var client = new x_16255_cmdb_sync.Client(sourceGr);
			var lastId;
			var hasMoreRecords = true;
			var fieldsToParse = ['id', 'name', 'ruleType'];
			var insertCount = 0;
			var updateCount = 0;
			var errorCount = 0;
			
			while (hasMoreRecords) {
				var xml = client.getTags(lastId);

				if (xml != false) {
					// parse xml and add/update tags in table
					var count = xml.getNodeText('ServiceResponse/count');
					hasMoreRecords = xml.getNodeText('ServiceResponse/hasMoreRecords');
					
					gs.info('1.0 | Received ' + count + ' tags from source "' + sourceGr.name + '".');

					var tag = xml.getFirstNode('//data/Tag') || false;

					while(tag) {
						var childIterator = tag.getChildNodeIterator(); // interator over children of 'Tag'
						var tagObject = {};

						while (childIterator.hasNext()) {
							var childNode = childIterator.next();
							var nodeName = childNode.getNodeName();

							if (fieldsToParse.indexOf(nodeName) > -1) {
								tagObject[nodeName] = childNode.getTextContent();
							}
						} // while - child

						var response = this.insertOrUpdateTag(sourceGr, tagObject);
						if (response == 'insert') insertCount++;
						else if (response == 'update') updateCount++;
						else if (response == 'error') errorCount++;
						
						tag = xml.getNextNode(tag);
					} // while
					
					if (hasMoreRecords == 'false') {
						hasMoreRecords = false;
						gs.info('1.0 | Pulled all tags from source "' + sourceGr.name + '". New: ' + insertCount + ' Updated: ' + updateCount + ' Error: ' + errorCount);
					}
					else {
						hasMoreRecords = true;
						lastId = xml.getNodeText('ServiceResponse/lastId');
						gs.info('1.0 | Source "' + sourceGr.name + '" has more tags to pull. Pulled tags until id ' + lastId);
					}
				}
				else {
					gs.error('1.0 | Could not get tags from source "' + sourceGr.name + '".');
				}// if-else				
			} // while hasMoreRecords
			
			gs.info('1.0 | Tag sync from source "' + sourceGr.name + '" completed.');
		} // while
	}, // syncTags
	
	syncGroups: function (sourceGr) {
		if (sourceGr == undefined) {
			sourceGr = new GlideRecord(this.tables.source);
			sourceGr.addQuery('sync_asset_groups', true);
			sourceGr.query();
		}

		while (sourceGr.next()) {
			gs.info('1.0 | Syncing groups from source "' + sourceGr.name + '".');
			
			var client = new x_16255_cmdb_sync.Client(sourceGr);
			var xml = client.getGroups();
			var rootElement = xml.getDocumentElement();
			var insertCount = 0;
			var updateCount = 0;
			var errorCount  = 0;
			
			if (xml != false) {
				var group = xml.getFirstNode('//ASSET_GROUP_LIST/ASSET_GROUP') || false;
				
				while (group) {
					xml.setCurrentElement(group);
					
					var id = xml.getNodeText("//ID");
					var title = xml.getNodeText("//TITLE");
					var groupObject = {id: id, title: title};
					
					var response = this.insertOrUpdateGroup(sourceGr, groupObject);
					if (response == 'insert') insertCount++;
					else if (response == 'update') updateCount++;
					else if (response == 'error') errorCount++;
					
					xml.setCurrentElement(rootElement);
					group = xml.getNextNode(group);
				} // while - group
			} // if
			gs.info('1.0 | Groups sync from source "' + sourceGr.name + '" completed.');
		} // while
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-07 07:15:12</sys_created_on>
        <sys_id>dcfcf04bdb3203009b6cf7fdbf9619e1</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>Util</sys_name>
        <sys_package display_value="Sync App" source="x_16255_cmdb_sync">8b8f5740dbb203009b6cf7fdbf9619b6</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Sync App">8b8f5740dbb203009b6cf7fdbf9619b6</sys_scope>
        <sys_update_name>sys_script_include_dcfcf04bdb3203009b6cf7fdbf9619e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-12-06 08:24:06</sys_updated_on>
    </sys_script_include>
</record_update>
